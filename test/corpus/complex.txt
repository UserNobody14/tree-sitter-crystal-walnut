================================================================================
Timeline statements
================================================================================

timeline:
    b = 2
    g = 3


--------------------------------------------------------------------------------

    (module
      (timeline_statement
        (block
          (unification
            (expression
              (primary_expression
                (identifier)))
            (expression
              (primary_expression
                (number))))
          (unification
            (expression
              (primary_expression
                (identifier)))
            (expression
              (primary_expression
                (number)))))))


================================================================================
Timeline statements and predicates
================================================================================

timeline:
    b = 2
    dge(v)


--------------------------------------------------------------------------------

   (module
      (timeline_statement
        (block
          (unification
            (expression
              (primary_expression
                (identifier)))
            (expression
              (primary_expression
                (number))))
          (predicate
            (primary_expression
              (identifier))
            (argument_list
              (expression
                (primary_expression
                  (identifier))))))))



================================================================================
Timeline statements and access
================================================================================

timeline:
    b = 2
    dge.z = 3


--------------------------------------------------------------------------------


    (module
      (timeline_statement
        (block
          (unification
            (expression
              (primary_expression
                (identifier)))
            (expression
              (primary_expression
                (number))))
          (unification
            (expression
              (primary_expression
                (attribute
                  (primary_expression
                    (identifier))
                  (identifier))))
            (expression
              (primary_expression
                (number)))))))

===============================
Either and all
================================

either:
    all:
        a = "mcbob"
        b = "bob"
    all:
        b = "bill"
        a = "bob"
a = "mcbob"

------------------------------

    (module
      (either_statement
        (block
          (all_statement
            (block
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))
          (all_statement
            (block
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))
      (unification
        (expression
          (primary_expression
            (identifier)))
        (expression
          (primary_expression
            (string
              (string_start)
              (string_content)
              (string_end))))))


===============================
Either and all
================================

  either:
      all:
          a = "mcbob"
          b = "bob"
      all:
          b = "bill"
          a = "bob"
  a = "mcbob"

------------------------------

    (module
      (either_statement
        (block
          (all_statement
            (block
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))
          (all_statement
            (block
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))
              (unification
                (expression
                  (primary_expression
                    (identifier)))
                (expression
                  (primary_expression
                    (string
                      (string_start)
                      (string_content)
                      (string_end)))))))))
      (unification
        (expression
          (primary_expression
            (identifier)))
        (expression
          (primary_expression
            (string
              (string_start)
              (string_content)
              (string_end))))))
